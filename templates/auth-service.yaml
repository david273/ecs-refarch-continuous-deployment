Parameters:
  Tag:
    Type: String
    Default: latest

  JwtPrivateKey:
    Type: String

  ApiAuthUsername:
    Type: String

  ApiAuthPassword:
    Type: String

  DesiredCount:
    Type: Number
    Default: 0

  LoadBalancerTargetGroup:
    Type: String
    Description: Arn of load balancer target group

  Cluster:
    Type: String


Resources:
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ECSServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: auth-service
          ContainerPort: 3000
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-auth-service
      ContainerDefinitions:
        - Name: auth-service
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
          Essential: true
          Memory: 1024
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: Tag
              Value: !Ref Tag
            - Name: JWT_KEY
              Value: !Ref JwtPrivateKey
            - Name: API_USERNAME
              Value: !Ref ApiAuthUsername
            - Name: API_PASSWORD
              Value: !Ref ApiAuthPassword

Outputs:
  Repository:
    Value: !Ref Repository

  StackName:
    Value: !Ref AWS::StackName
